// * is global selector for all elements
/* -------------------------------------------------------------------------- */
* {
  margin: 0;
  // border: 0;
  padding: 0;
  box-sizing: border-box;
  list-style: none;
}
/* -------------------------------------------------------------------------- */
// Declaring global CSS variables
//  :root can be useful for declaring global CSS variables
/* -------------------------------------------------------------------------- */
:root {
  --color-primary: #252A34;
  --color-secondary: #08D9D6;
  --color-white: #ffffff;
  --color-black: #000;
  --color-grey0: #f8f8f8;
  --color-grey1: #dbe1e8;
  --color-grey2: #b3becd;
  --color-grey3: #6c7983;
  --color-grey4: #454e56;
  --color-grey5: #2a2e35;
  --color-grey6: #12181b;
  --br-sm-2: 14px;
  --box-shadow-1: 0 4px 15px rgb(231, 209, 209); //rgba(0, 0, 0, 0.2)
  --box-shadow-2: 0 0 25px rgb(231, 209, 209); //rgba(0, 0, 0, 0.2)
}
/* -------------------------------------------------------------------------- */
// The <body> tag defines the document's body.
// The <body> element contains all the contents of an HTML document, such as headings, paragraphs, images, hyperlinks, tables, lists, etc.
/* -------------------------------------------------------------------------- */
body {
  background-color: var(--color-primary);
  font-family: 'Poppins', sans-serif;
  font-size: 1.1rem;
  color: var(--color-white);
  transition: all 0.4s ease-in-out;
}
/* -------------------------------------------------------------------------- */
// The <a> tag defines a hyperlink, which is used to link from one page to another.
/* -------------------------------------------------------------------------- */
a {
  /* -------------------------------------------------------------------------- */
  // The display CSS property sets whether an element is treated as a block or inline element and the layout used for its children, such as flow layout, grid or flex.
  /* -------------------------------------------------------------------------- */
  display: inline-block;
  /* -------------------------------------------------------------------------- */
  // The text-decoration shorthand CSS property sets the appearance of decorative lines on text. 
  /* -------------------------------------------------------------------------- */
  text-decoration: none;
  /* -------------------------------------------------------------------------- */
  // the cascade, specificity, and inheritance â€” which control how CSS is applied to HTML and how conflicts are resolved.
  
  color: inherit;
  font-family: inherit;
}
/* -------------------------------------------------------------------------- */
// The <header> element represents a container for introductory content or a set of navigational links.
/* -------------------------------------------------------------------------- */
header {
  height: 100vh;
  color: var(--color-white);
  overflow: hidden;
}
/* -------------------------------------------------------------------------- */
// The <section> HTML element represents a generic standalone section of a document, which doesn't have a more specific semantic element to represent it. Sections should always have a heading, with very few exceptions.
/* -------------------------------------------------------------------------- */
section {
  min-height: 100vh;
  width: 100%;
  position: absolute;
  left: 0;
  top: 0;
  padding: 3rem 18rem;
}

/* -------------------------------- sections -------------------------------- */
.section {
  transform: translateY(-100%) scale(0);
  transition: all 0.4s ease-in-out;
  background-color: var(--color-primary);
}

.sec1 {
  display: none;
  transform: translateY(0) scale(1);
}

.sec2 {
  display: none;
  transform: translateY(0) scale(1);
}
.sec3 {
  display: none;
  transform: translateY(0) scale(1);
}
.sec4 {
  display: none;
  transform: translateY(0) scale(1);
}
.sec5 {
  display: none;
  transform: translateY(0) scale(1);
}

.active {
  display: block;
  animation: scaleAnim 0.4s ease-in-out;
  @keyframes scaleAnim {
    0% {
      transform: translateY(-100%) scaleY(0);
    }
    100% {
      transform: translateY(0) scaleY(1);
    }
  }
}

/* -------------------------------- controls -------------------------------- */
.controls {
  position: fixed;
  z-index: 10;
  top: 50%;
  right: 3%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  transform: translateY(-50%);

  .active-btn {
    background-color: var(--color-secondary) !important;
    transition: all 0.4s ease-in-out;
    i {
      color: var(--color-white) !important;
    }
  }
  .control {
    padding: 1 rem;
    //change cursor when mouse is on it
    cursor: pointer;

    background-color: var(--color-grey4);
    width: 55px;
    height: 55px;

    //convert it to circle
    border-radius: 50%;

    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0.3rem 0;
    box-shadow: var(--box-shadow-1);

    //increase the size of content inside the icon//
    i {
      font-size: 1.2rem;
      color: var(--color-grey2);

      // reaction to click
      pointer-events: none;
    }
  }
}

/* ----------------------------- header-content ----------------------------- */

.header-content {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  height: 100%;
  .left-header {
    display: flex;
    align-items: center;
    position: relative;

    .h-shape {
      transition: all 0.4s ease-in-out;
      width: 65%;
      height: 100%;
      background-color: var(--color-secondary);
      position: absolute;
      left: 0;
      top: 0;
      z-index: -1;
      // can use clip path generator
      clip-path: polygon(0 0, 46% 0, 79% 100%, 0 100%);
    }
    .image {
      border-radius: var(--br-sm-2);
      height: 60%;
      width: 60%;
      margin-left: 4rem;
      background-color: var(--color-black);
      transition: all 0.4s ease-in-out;
      box-shadow: var(--box-shadow-2);

      img {
        width: 80%;
        height: 80%;
        object-fit: cover;
        transition: all 0.4s ease-in-out;
        filter: grayscale(100%);
        &:hover {
          filter: grayscale(0);
        }
      }
    }
  }
  .right-header {
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding-right: 18rem;
    .name {
      font-size: 2.5rem;
      span {
        color: var(--color-secondary);
      }
    }
    p{
      margin: 1.5rem 0;
      line-height: 1.5rem;
    }
  }
}


/* -------------------------- independent Component ------------------------- */

.btn-con{
  display: flex;
  align-self:flex-start;
}
.main-btn{
   border-radius: 30px;
   color: inherit;
   font-weight: 600;
   position: relative;
   border: 1px solid var(--color-secondary);
   display: flex;
   align-self: flex-start;
   display: flex;
   align-items: center;
   overflow: hidden;
   .btn-text{
     padding: 0 2rem;
   }
   .btn-icon{
     background-color: var(--color-secondary); 
     display : flex;
     align-items: center;
     justify-content: center;
     border-radius: 50px;
     padding: 1rem
   }
   &::before{
      content: '';
      position: absolute;
      top: 0;
      right: 0;
      transform: translateX(100%);
      transition: all 0.4s ease-in-out;
      z-index: -1;
   }
   &:hover{
     &::before{
       width: 100%;
       height: 100%;
       background-color: var(--color-secondary);
       transform: translateX(0);

     }
   }
}

.main-title{
  text-align: center;
  h2{
    position: relative;
    text-transform: uppercase;
    font-size: 4rem;
    font-weight: 700;
    span{
      color: var(--color-secondary)
    }
    .bg-text{
      position: absolute;
      top: 50%; 
      left: 50%;
      color: var(--color-grey-5);
      z-index: -1;
      transform: translate(-50%, -50%);
      font-weight: 800;
      font-size: 6.3rem;
    }
  }
}